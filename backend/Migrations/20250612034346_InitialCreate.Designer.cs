// <auto-generated />
using System;
using Askii.backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250612034346_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Askii.backend.Model.Question", b =>
                {
                    b.Property<string>("QuestionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("AskerUID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Votes")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestionID");

                    b.HasIndex("AskerUID");

                    b.HasIndex("SessionID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Askii.backend.Model.Session", b =>
                {
                    b.Property<string>("SessionID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionAdminUID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionTopic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SessionID");

                    b.HasIndex("SessionAdminUID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Askii.backend.Model.User", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SessionUser", b =>
                {
                    b.Property<string>("AttendedSessionsSessionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionAttendeesUID")
                        .HasColumnType("TEXT");

                    b.HasKey("AttendedSessionsSessionID", "SessionAttendeesUID");

                    b.HasIndex("SessionAttendeesUID");

                    b.ToTable("SessionAttendees", (string)null);
                });

            modelBuilder.Entity("SessionUser1", b =>
                {
                    b.Property<string>("ModeratedSessionsSessionID")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionModeratorsUID")
                        .HasColumnType("TEXT");

                    b.HasKey("ModeratedSessionsSessionID", "SessionModeratorsUID");

                    b.HasIndex("SessionModeratorsUID");

                    b.ToTable("SessionModerators", (string)null);
                });

            modelBuilder.Entity("Askii.backend.Model.Question", b =>
                {
                    b.HasOne("Askii.backend.Model.User", "Asker")
                        .WithMany()
                        .HasForeignKey("AskerUID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Askii.backend.Model.Session", "Session")
                        .WithMany("Questions")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asker");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Askii.backend.Model.Session", b =>
                {
                    b.HasOne("Askii.backend.Model.User", "SessionAdmin")
                        .WithMany("AdministeredSessions")
                        .HasForeignKey("SessionAdminUID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SessionAdmin");
                });

            modelBuilder.Entity("SessionUser", b =>
                {
                    b.HasOne("Askii.backend.Model.Session", null)
                        .WithMany()
                        .HasForeignKey("AttendedSessionsSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Askii.backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("SessionAttendeesUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SessionUser1", b =>
                {
                    b.HasOne("Askii.backend.Model.Session", null)
                        .WithMany()
                        .HasForeignKey("ModeratedSessionsSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Askii.backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("SessionModeratorsUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Askii.backend.Model.Session", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Askii.backend.Model.User", b =>
                {
                    b.Navigation("AdministeredSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
